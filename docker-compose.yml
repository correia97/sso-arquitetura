version: '3.4'
services:
  cadastro.api:
    image: ${DOCKER_REGISTRY-}cadastroapi
    container_name: cadastro.api
    build:
      context: .
      dockerfile: src/Cadastro.API/Dockerfile
    networks:
      - externo
      - base 
    depends_on:   
       db:
         condition: service_started
       rabbitmq:
         condition: service_healthy

  cadastro.mvc:
    image: ${DOCKER_REGISTRY-}cadastromvc
    container_name: cadastro.mvc
    build:
      context: .
      dockerfile: src/Cadastro.MVC/Dockerfile
    networks:
      - externo
    depends_on:
      - cadastro.api

  cadastro.workerservice:
    image: ${DOCKER_REGISTRY-}cadastroworker
    container_name: cadastro.worker
    build:
      context: .
      dockerfile: src/Cadastro.WorkerService/Dockerfile
    networks:
      - base
    depends_on:
       db:
         condition: service_started
       rabbitmq:
         condition: service_healthy

  cadastro.angular:
    image: angular
    build:
      context: ./src/cadastro.angular/
      dockerfile: Dockerfile
    container_name: cadastro.angular
    depends_on:
      - cadastro.api
    networks:
      - externo
    ports:
      - 4200:80

  db:
    image: postgres:13.3-alpine
    container_name: cadastro.db
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: db01
    # Un-comment to access the db service directly
    ports:
      - 5432:5432
    networks:
      - base
    #restart: unless-stopped
    volumes:
      - dbData:/var/lib/postgresql/data

  rabbitmq:    
    image: rabbitmq:3.9-plugins
    container_name: rabbitmq
    build:
      context: ./src/Rabbitmq
    ports:
      - 15672:15672  #Management
      - 5672:5672    #AMQP
      - 15692:15692  #metrics
    environment:
      RABBITMQ_DEFAULT_USER: mc
      RABBITMQ_DEFAULT_PASS: mc2
      RABBITMQ_DEFAULT_VHOST: main
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "5672" ]
      timeout: 5s
      retries: 5
    volumes:
      - mq_data:/var/lib/rabbitmq/mnesia
    networks: 
      - base
      - externo

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.4.0
    container_name: elasticsearch
    environment:
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - discovery.type=single-node
      - http.host=0.0.0.0
      - transport.host=127.0.0.1
      - network.host=0.0.0.0
      - cluster.name="elastic_stack_logging"
      - node.name="elastic_stack_logging_data"
      - http.cors.enabled=true
      - http.cors.allow-origin="*"
      - ELASTIC_PASSWORD="elastic123"
    mem_limit: 1073741824  
    healthcheck:
      interval: 15s
      retries: 10
      test: 
        [
          "CMD-SHELL",
          "curl -I -s -L http://localhost:9200 || exit 1"
        ]
    volumes:
      - elk_data:/usr/share/elasticsearch/data
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - 9200:9200
      - 9300:9300
    networks:    
      - externo
      - base   
  
  kibana:
    image:  docker.elastic.co/kibana/kibana:8.4.0
    container_name: kibana
    volumes:
      - kibana_data:/usr/share/kibana/data
    environment:
      - SERVERNAME=kibana
      - SERVERHOST="0"
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD="elastic123"
      - xpack.reporting.roles.enabled=false
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 50
    ports: 
      - 5601:5601
    networks:
      - externo
    depends_on:
      elasticsearch:
        condition: service_healthy

  # apmserver:
  #   image: docker.elastic.co/apm/apm-server:8.4.0
  #   container_name: apmserver
  #   ports:
  #     - 8200:8200
  #     - 5066:5066
  #   volumes:
  #     - "./elastic/apm-server.docker.yml:/usr/share/apm-server/apm-server.yml:ro"
  #   depends_on:
  #     elasticsearch:
  #       condition: service_healthy
  #     kibana:
  #       condition: service_started 
  #   networks:    
  #     - externo
  #     - base   

  # metricbeat:   
  #   image: docker.elastic.co/beats/metricbeat:8.4.0
  #   container_name: metricbeat
  #   command:
  #     - setup -E setup.kibana.host=kibana:5601   
  #   depends_on:
  #     elasticsearch:
  #       condition: service_healthy
  #     kibana:
  #       condition: service_started  
  #   volumes:
  #     - "./elastic/metricbeat.docker.yml:/usr/share/metricbeat/metricbeat.yml:ro"
  #     - "/var/run/docker.sock:/var/run/docker.sock:ro"
  #     - "/sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro"
  #     - "/proc:/hostfs/proc:ro"
  #     - "/:/hostfs:ro"
  #   networks:    
  #     - externo
  #     - base 

  # logstash:
  #   image: docker.elastic.co/logstash/logstash:8.4.0
  #   container_name: logstash  
  #   environment:      
  #     LS_JAVA_OPTS: -Xms256m -Xmx256m
  #   volumes:
  #     - ./elastic/pipelines/:/usr/share/logstash/pipeline/   
  #   depends_on:
  #     elasticsearch:
  #       condition: service_healthy
  #     rabbitmq:
  #       condition: service_healthy
  #     kibana:
  #       condition: service_started  
  #   networks:    
  #     - externo
  #     - base 




  #keycloak:
  #  image: quay.io/keycloak/keycloak:19.0
  #  container_name: keycloak
  #  command:
  #   - start-dev
  #  environment:
  #    - KC_DB=postgres
  #    - KC_DB_USERNAME=postgres
  #    - KC_DB_PASSWORD=postgres
  #    - KC_DB_URL=jdbc:postgresql://db/db01
  #    - DB_DATABASE=db01
  #    - KEYCLOAK_ADMIN=admin
  #    - KEYCLOAK_ADMIN_PASSWORD=admin
  #    - PROXY_ADDRESS_FORWARDING=true
  #    - KC_PROXY=edge
  #    - KC_METRICS_ENABLED=true
  #    - KC_HOSTNAME=keycloak.localhost
  #    - KC_FEATURES=token-exchange
  #  depends_on:
  #    - db
  #  networks:
  #    - base
  #    - externo
  #  ports:
  #    - 8088:8080
  #    - 9099:9090

  nginx:
    image: nginx:1.23.1-alpine
    container_name: nginx
    domainname: localhost
    volumes:
       - ./src/nginx/nginx.conf:/etc/nginx/nginx.conf
       - ./src/nginx/nginxconfig:/etc/nginx/conf.d/
       - ./src/nginx/certificate:/etc/ssl/certs/         
    ports:
       - 80:80
       - 443:443
       - 8080:8080
       - 9090:9090
       - 9011:9011
    networks:
      - externo
    depends_on:
      #- fusionauth
      cadastro.mvc:
         condition: service_started
      cadastro.angular:
         condition: service_started      
      cadastro.api:
         condition: service_started      
      #- keycloak
    environment: 
      - NGINX_HOST=localhost
      - NGINX_PORT=80  

networks:
  base:
  externo:
volumes:
  dbData:
  mq_data:
  elk_data:
  kibana_data:

