# versão do arquivo de configuração de build
version: 2.1

# Conjunto de Execuções que serão realizadas
jobs:
  buildSemDockerFile:
    # Definição que será utilizada uma docker para realizar o build
    docker:
      # Nome da imagem docker que será utilizada
      - image: mcr.microsoft.com/dotnet/sdk:6.0-focal
    # Definição dos passos para a realização do build dentro da imagem
    steps:
      - run: apt-get update && apt-get install -y openssh-client git
      # Clone do projeto
      - checkout
      - run: git submodule sync --recursive
      - run: git submodule update --init
      # Execução de uma linha de comando
      - run:
          name: Restore packages
          command: dotnet restore Exemplo.SSO.sln
        # Execução de uma linha de comando
      - run:
          name: Build App
          command: dotnet build Exemplo.SSO.sln -c Release
  # Execução de build
  test:
    # Definição que será utilizada uma docker para realizar o build
    docker:
      # Nome da imagem docker que será utilizada
      - image: mcr.microsoft.com/dotnet/sdk:6.0-focal
    # Definição dos passos para a realização do build dentro da imagem
    steps:
      # Clone do projeto
      - checkout
      - run: git submodule sync --recursive
      - run: git submodule update --init
      # Execução de uma linha de comando
      - run:
          name: Restore packages
          command: dotnet restore Exemplo.SSO.sln
        # Execução de uma linha de comando
      - run:
          name: install Tool ReportGenerator
          command: dotnet tool install --tool-path ./ dotnet-reportgenerator-globaltool --version 5.1.15
      - run:
          name: install Tool sonarscanner
          command: dotnet tool install --tool-path ./ dotnet-sonarscanner --version 5.5.0
      - run:
          name: JavaConfig
          command: |
            apt-get update && \
            apt-get install -y \
            ca-certificates \
            apt-transport-https && \
            rm -rf /var/lib/apt/lists/*


            echo '--------------------------------------------------------------------------'
            echo '--------------------------------------------------------------------------'
            echo '--------------------------------------------------------------------------'
            curl https://download.oracle.com/java/21/latest/jdk-21_linux-x64_bin.deb -o jdk-21_linux-x64_bin.deb
            dpkg -i jdk-21_linux-x64_bin.deb

            echo '--------------------------------------------------------------------------'
            echo '--------------------------------------------------------------------------'
            echo '--------------------------------------------------------------------------'
            
            java --version
            update-alternatives --config java

      - run:
          name: inicio da analise
          command: ./dotnet-sonarscanner begin /o:correia97 /k:correia97_sso /d:sonar.login=${sonarkey} /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="/root/project/test/results/coverage.opencover.xml,/root/project/src/Cadastro.API/results/coverage.opencover.xml,/root/project/src/Cadastro.MVC/results/coverage.opencover.xml,/root/project/src/Cadastro.GRPC/results/coverage.opencover.xml,/root/project/src/Cadastro.WorkerService/results/coverage.opencover.xml" /d:sonar.exclusions=**\bin\**,**\obj\**,**\node_modules\**,**\wwwroot\**
        # Execução de uma linha de comando
      - run:
          name: Build App
          command: dotnet build Exemplo.SSO.sln
        # Execução de uma linha de comando
      - run:
          name: Run Test
          command: dotnet test Exemplo.SSO.sln --no-build /p:ExcludeByFile=\"**/Program.cs\" /p:Exclude="[*]Cadastro.Configuracoes.*" /p:CollectCoverage=true /p:CoverletOutputFormat="opencover" /p:CoverletOutput="../results/"  --results-directory /root/project/test/Cadastro.Test/output/  --logger "trx"
      - run:
          name: fim da analise
          command: ./dotnet-sonarscanner end /d:sonar.login=${sonarkey}

      # Execução de uma linha de comando
      - run:
          name: Generate Report
          command:
            ./reportgenerator "-reports:*/results/*/coverage.opencover.xml" \
            "-targetdir:/root/project/test/results/report/" \
            "-reporttypes:Html" \
            "-sourcedirs:/root/project/test/results/"

      - run:
          name: Teste result for circleci
          command: |
            dotnet tool install -g trx2junit
            export PATH="$PATH:/root/.dotnet/tools"
            trx2junit /root/project/test/Cadastro.Test/output/*.trx
      # Armazenamento do conteudo da pasta result
      - store_artifacts:
          path: /root/project/results/report/

      - store_test_results:
          path: /root/project/test/Cadastro.Test/output/

# Definição dos trabalhos que serção executados
workflows:
  # Nome do trabalho que seá executado
  build_and_test:
    # definição das Ações que serão executadas
    jobs:
      - test:
          context: builds
      - buildSemDockerFile:
          requires:
            - test
