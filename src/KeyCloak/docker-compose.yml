version: "3.4"
services:
  db:
    image: postgres:13.3-alpine
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: db01
    # Un-comment to access the db service directly
    ports:
     - 5432:5432
    networks:
      - base
    restart: unless-stopped
    volumes:
      - dbData:/var/lib/postgresql/data

  cadastro_api:
    image: cadastro_api
    build:
      context: ./../API/
      dockerfile: Dockerfile
    container_name: cadastro_api
    environment:
      - ASPNETCORE_ENVIRONMENT=Keycloak
      - BaseAuthUrl=http://192.168.0.143:8088
    depends_on:
      - db
    networks:
      - base
      - externo
      - externo1
    ports:
      - 8081:80
    labels:
      - "traefik.enable=true"
      # - "traefik.http.routers.cadastro_api.entrypoints=http://cadastro_api"
      - "traefik.http.routers.cadastro_api.rule=Host(`cadastro_api.localhost`)"
      - "traefik.docker.network=externo1"
      - "traefik.http.services.cadastro_api.loadbalancer.server.port=80"
      - "traefik.port=80"

  cadastro_mvc:
    image: cadastro_mvc
    build:
      context: ./../MVC/
      dockerfile: Dockerfile
    container_name: cadastro_mvc
    environment:
      - ASPNETCORE_ENVIRONMENT=Keycloak
      - BaseAuthUrl=http://192.168.0.143:8088
    depends_on:
      - cadastro_api
    networks:
      - externo
      - externo1
    ports:
      - 8085:80
    labels:
      - "traefik.enable=true"
      # - "traefik.http.routers.cadastro_mvc.entrypoints=http://cadastro_mvc"
      - "traefik.http.routers.cadastro_mvc.rule=Host(`cadastro_mvc.localhost`)"
      - "traefik.docker.network=externo1"
      - "traefik.http.services.cadastro_mvc.loadbalancer.server.port=80"
      - "traefik.port=80"

  angular:
    image: angular
    build:
      context: ./../angular/
      dockerfile: Dockerfile
    container_name: angular
    depends_on:
      - cadastro_api
    networks:
      - externo
      - externo1
    ports:
      - 4200:80
    labels:
      - "traefik.enable=true"
      # - "traefik.http.routers.angular.entrypoints=http://angular"
      - "traefik.http.routers.angular.rule=Host(`angular.localhost`)"
      - "traefik.docker.network=externo1"
      - "traefik.http.services.angular.loadbalancer.server.port=80"
      - "traefik.port=80"
  
  traefik:
    image: traefik:v2.5
    container_name: traefik
    # hostname: "traefik"
    ports:
      - "80:80"
      - "8089:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./traefik.yml:/traefik.yml:ro"
    networks:
      - externo
      - externo1
    depends_on:
      - fusionauth
      - cadastro_mvc
      - angular      
      - cadastro_api      
      - keycloak

  fusionauth:
    image: fusionauth/fusionauth-app:1.26.1
    container_name: fusionauth
    depends_on:
      - db
    environment:
        DATABASE_URL: jdbc:postgresql://db:5432/fusionauth
        # Prior to version 1.19.0, use this deprecated name
        # DATABASE_ROOT_USER: ${POSTGRES_USER}
        DATABASE_ROOT_USERNAME: postgres
        DATABASE_ROOT_PASSWORD: postgres
        # Prior to version 1.19.0, use this deprecated name
        # DATABASE_USER: ${DATABASE_USER}
        DATABASE_USERNAME: postgres
        DATABASE_PASSWORD: postgres
        # Prior to version 1.19.0, use this deprecated names
        # FUSIONAUTH_MEMORY: ${FUSIONAUTH_MEMORY}
        # FUSIONAUTH_SEARCH_ENGINE_TYPE: database
        # FUSIONAUTH_URL: http://fusionauth:9011
        # FUSIONAUTH_RUNTIME_MODE: development
        FUSIONAUTH_APP_MEMORY: 512M
        FUSIONAUTH_APP_RUNTIME_MODE: development
        FUSIONAUTH_APP_URL: http://fusionauth:9011
        SEARCH_TYPE: database
    networks:
      - externo
      - externo1
      - base
    restart: unless-stopped
    ports:
      - 9011:9011
    volumes:
      - fa_config:/usr/local/fusionauth/config
    # hostname: fusionauth
    labels:
      - "traefik.enable=true"
      # - "traefik.http.routers.fusionauth.entrypoints=http://fusionauth:9011"
      - "traefik.http.routers.fusionauth.rule=Host(`fusionauth.localhost`)"
      - "traefik.docker.network=externo1"
      - "traefik.http.services.fusionauth.loadbalancer.server.port=80"
      - "traefik.http.middlewares.limit.buffering.maxRequestBodyBytes=2000000"
      - traefik.frontend.auth.forward.authResponseHeaders=X-Forwarded-User
      - traefik.frontend.auth.forward.trustForwardHeader=true

  keycloak:
    image: quay.io/keycloak/keycloak:14.0.0
    container_name: keycloak
    environment:
      - DB_VENDOR=postgres
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_ADDR=db
      - DB_DATABASE=db01
      - KEYCLOAK_USER=admin
      - KEYCLOAK_PASSWORD=admin
      - KEYCLOAK_IMPORT=./realm-export.json
    volumes:
      - ./realm-export.json:/realm-export.json
    depends_on:
      - db
      #- nginx
    networks:
      - base
      - externo
      - externo1
    ports:
      - 8088:8080
      - 9099:9090
    labels:
      - "traefik.enable=true"
      # - "traefik.http.routers.keycloak.entrypoints=http://keycloak:8080"
      - "traefik.http.routers.keycloak.rule=Host(`keycloak.localhost`)"
      - "traefik.docker.network=externo1"
      - "traefik.http.services.keycloak.loadbalancer.server.port=8080"
      - "traefik.port=80"
      - "traefik.http.middlewares.limit.buffering.maxRequestBodyBytes=2000000"
      - "traefik.frontend.auth.forward.authResponseHeaders=X-Forwarded-User"
      - "traefik.frontend.auth.forward.trustForwardHeader=true"



  # nginx:
  #   image: nginx:1.21.0-alpine
  #   volumes:
  #      - ./nginx.conf:/etc/nginx/nginx.conf
  #      - ./nginxconfig:/etc/nginx/conf.d/
  #   ports:
  #      - "80:80"
  #      - "90:90"
  #   networks:
  #     - externo


networks:
  base:
  externo:
  externo1:
   external: true
volumes:
  dbData:
  dbLog:
  dbSecrets:
  fa_config:
